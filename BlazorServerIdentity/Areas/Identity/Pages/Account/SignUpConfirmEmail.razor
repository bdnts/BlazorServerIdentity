@page "/SignUpConfirmEmail"
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authorization;
@using BlazorServerIdentity.Areas.Identity.Data;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.WebUtilities;
@using BlazorServerIdentity.Extensions; 
@inject UserManager<BlazorServerIdentityUser> _userManager;
@inject NavigationManager navman;

<h3>@StatusMessage</h3>
<hr />
<SignIn></SignIn>
@code {      
    public string userId;
    public string code;
    public string StatusMessage { get; set; }

    protected override void OnInitialized()
    {
        // TryGetQueryString is an Extension to Navigation Manager, courtesy of Chris Sainty
        // https://chrissainty.com/working-with-query-strings-in-blazor/
        navman.TryGetQueryString<string>("userId", out userId);
        navman.TryGetQueryString<string>("code", out code);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        // Was a `userId` passed through on the request?
        if (string.IsNullOrEmpty(userId))
        {
            StatusMessage = string.Empty;
            return;
        }

        // Is the `userId` found in the database?
        var user = await _userManager.FindByIdAsync(userId);
        if (user == null)
        {
            StatusMessage = "Could not find userid = " + userId;
            return;
        }

        // Confirm the users email in the database.
        code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code));
        var result = await _userManager.ConfirmEmailAsync(user, code);
        if (!result.Succeeded)
        {
            StatusMessage = "Error confirming your email.";
            return;
        }

        // Present a message
        StatusMessage = "Thank you for confirming your email.   Please Sign In to complete your profile.";

        base.OnParametersSet();
    }

}
