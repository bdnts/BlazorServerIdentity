@page "/SignUp"

@using System;
@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;
@using System.Linq;
@using System.Text;
@using System.Text.Encodings.Web;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using BlazorServerIdentity.Areas.Identity.Data;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.UI.Services;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Logging;

@inject SignInManager<BlazorServerIdentityUser> _signInManager;
@inject UserManager<BlazorServerIdentityUser> _userManager;
@inject ILogger<SignUp> _logger;
@inject IEmailSender _emailSender;

<h1 class="text-center">Sign Up</h1>

<div class="container text-center">
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Input" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <h4>Create a new account.</h4>
                <hr />
                <div class="form-group">
                    <label>
                        Email Address
                        <InputText @bind-Value="Input.Email" />
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        Password
                        <InputText @bind-Value="Input.Password" />
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        Confirm Password
                        <InputText @bind-Value="Input.ConfirmPassword" />
                    </label>
                </div>
                <button type="submit" class="btn btn-primary">Register</button>
            </EditForm>
        </div>
        <div class="col-md-6 col-md-offset-2">
            <section>
                <h4>Use another service to register.</h4>
                <hr />
                @{
                    if ((ExternalLogins?.Count ?? 0) == 0)
                    {
                        <div>
                            <p>
                                There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                                for details on setting up this ASP.NET application to support logging in via external services.
                            </p>
                        </div>
                    }
                    else
                    {
                        <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@ReturnUrl" method="post" class="form-horizontal">
                            <div>
                                <p>
                                    @foreach (var provider in ExternalLogins)
                                    {
                                        <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                    }
                                </p>
                            </div>
                        </form>
                    }
                }
            </section>
        </div>
    </div>

</div>


@code {

    public InputModel Input { get; set; } = new InputModel();

    public string ReturnUrl { get; set; }

    public IList<AuthenticationScheme>
        ExternalLogins
    { get; set; }

    public class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }

    public async Task OnGetAsync(string returnUrl = null)
    {
        ReturnUrl = returnUrl;
        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    /// <summary>
    /// Technically, UserManager and SignInManager are not supported in Razor. 
    /// And SignInManager.SignInAsync definitely won't work.
    /// But they seem to work the rest of the time.  Let's give them a chance
    /// </summary>
    public async void OnValidSubmit()
    {
        //Url is part of PageModel, we'll use an alternative.
        //ReturnUrl = ReturnUrl ?? Url.Content("~/");
        ReturnUrl = ReturnUrl ?? "/";

        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        //if (ModelState.IsValid)
        //{

        // Sign up the new user
        var user = new BlazorServerIdentityUser { UserName = Input.Email, Email = Input.Email };
        var result = await _userManager.CreateAsync(user, Input.Password);
        if (result.Succeeded)
        {
            _logger.LogInformation("User created a new account with password.");

            // Now set about mimicking sending a confirmation email
            // But wait, there is a better.  With Blazor, I can just chain to another component to do this.
            // For now, will deprecate everything else.

            //    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            //    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            //    var callbackUrl = Url.Page(
            //    "/Account/ConfirmEmail",
            //    pageHandler: null,
            //    values: new { area = "Identity", userId = user.Id, code = code },
            //    protocol: Request.Scheme);

            //    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
            //    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

            //    if (_userManager.Options.SignIn.RequireConfirmedAccount)
            //    {
            //        return RedirectToPage("RegisterConfirmation", new { email = Input.Email });
            //    }
            //    else
            //    {
            //        await _signInManager.SignInAsync(user, isPersistent: false);
            //        return LocalRedirect(returnUrl);
            //    }
            //}
            //foreach (var error in result.Errors)
            //{
            //    ModelState.AddModelError(string.Empty, error.Description);
            //}
        }

        //// If we got this far, something failed, redisplay form
        //return Page();
    }

    public void OnInvalidSubmit()
    {

    }

}
